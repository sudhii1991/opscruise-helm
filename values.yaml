global:
    awsCredentials:
        region: us-east-1


# Opscruise aws gateway
awsgw:
    #enabled: true

    replicaCount: 1
    image:
        repository: opscruiseindia/ocsouth
        tag: awsgw1.1.0
        imagePullPolicy: Always
    
    env:
        lvalue: "warning"
        awsregionvalue: us-east-1
    
    envFrom:
        secretRefname1: oc-gw-creds
        secretRefname2: oc-aws-credential
    
    volumeMounts:
        name: awsgw-certs-volume
        mountPath: /var/opscruise/certs
    
    imagePullSecrets:
        name: oc-docker-creds
    
    restartPolicy: Always
    
    secret:
        secretName: oc-gw-certs
    
    resources:
        limits:
            cpu: 500m
            memory: 250Mi
        requests:
            cpu: 200m
            memory: 50Mi


# Opscruise k8s gateway
k8sgw:
    #enabled: true

    replicaCount: 1

    image:
        repository: opscruiseindia/ocsouth
        tag: k8sgw1.1.0
        imagePullPolicy: Always

    env:
        lvalue: "warning"

    envFrom:
        secretRef: oc-gw-creds

    volumeMounts:
        name: k8s-certs-volume
        mountPath: /var/opscruise/certs

    imagePullSecrets:
        name: oc-docker-creds

    restartPolicy: Always

    secret:
        secretName: oc-gw-certs

    resources:
        limits:
            cpu: 500m
            memory: 250Mi
        requests:
            cpu: 200m
            memory: 50Mi

    subjects:
        name: default


# Opscruise prometheus gateway
promgw:
    #enabled: true

    name: promgw-deployment
    app: promgw
    opscruisePerimeter: opscruise
    opscruiseGroup: gateways
    opscruiseProduct: promGW
    opscruiseStream: opscruise

    replicaCount: 1

    image:
        repository: opscruiseindia/ocsouth
        tag: promgw1.1.0
        imagePullPolicy: Always
        containerPort: 8080
    
    env:
        lvalue: "warning"
        
    envFrom:
        secretRefname: oc-gw-creds
    
    ports:
        containerPort: 8080
        # service target port should be same

    volumeMounts:
        name: promgw-certs-volume
        mountPath: /var/opscruise/certs

    imagePullSecrets:
        name: oc-docker-creds

    restartPolicy: Always

    secret:
       secretName: oc-gw-certs
    
    service:
        app: promgw
        name: promgw-service
        opscruisePerimeter: opscruise
        opscruiseGroup: gateways
        opscruiseProduct: promGW
        opscruiseStream: opscruise
        protocol: TCP
        port: 8585
        targetPort: 8080
    
    resources:
        limits:
            cpu: 500m
            memory: 300Mi
        requests:
            cpu: 200m
            memory: 50Mi


# Opscruise node-exporter
opscruise-node-exporter:
    #enabled: true

    name: prometheus-node-exporter

    image:
        repository: opscruiseindia/ocsouth
        tag: bpf-test-new
        imagePullPolicy: Always

    args:
        procFS: --path.procfs=/host/proc
        sysFS: --path.sysfs=/host/sys
        webMaxRequests: --web.max-requests=1
        reversePathPacket: --collector.conntrackext.forward-and-reverse-path-packets
        enableAllMetrics: --collector.ocflowbpfcollector.enable-all-metrics
        interface: --collector.ocflowbpfcollector.interface

    interface: cni0
    
    ports:
        containerPort: 9100
        hostPort: 9100
        name: metrics
        
    resources:
        limits:
            memory: 600Mi
        requests:
            cpu: 200m
            memory: 300Mi

    securityContext:
        addNETADMIN: NET_ADMIN
        addSYSADMIN: SYS_ADMIN
        privileged: true

    labels:
        k8sapp: opscruise-node-exporter
        version: v0.15.2
        opscruisePerimeter: opscruise
        opscruiseGroup: exporters
        opscruiseProduct: NodeExporter
        opscruiseStream: opscruise
        kubernetesIoClusterService: true
        addonmanagerKubernetesIoMode: Reconcile

    volumeMounts:
        devmountPath: /host/dev
        procmountPath: /host/proc
        sysmountPath: /host/sys
        rootfsmountPath: /rootfs
        libModulesPath: /lib/modules
        bootPath: /boot
        srcpath: /usr/src
        bpfpath: /sys/fs/bpf

    hostNetwork: true
    hostPID: true

    imagePullSecrets:
        name: oc-docker-creds

    tolerations:
        key: node-role.kubernetes.io/master
        effect: NoSchedule

    volumes:
        procpath: /proc
        devpath: /dev
        syspath: /sys
        rootfspath: /
        libmodulespath: /lib/modules
        bootpath: /boot
        srcpath: /usr/src
        bpfpath: /sys/fs/bpf

    updateStrategy:
        type: RollingUpdate


#cadvisor        
cadvisor:
    #enabled: true

    name: cadvisor
    k8sapp: cadvisor-logging
    opscruisePerimeter: opscruise
    opscruiseGroup: exporters
    opscruiseProduct: cAdvisor
    opscruiseStream: opscruise

    image:
        repository: gcr.io/google_containers/cadvisor
        tag: v0.35.0

    tolerations:
        key: node-role.kubernetes.io/master
        effect: NoSchedule

    ports:
        name: http
        containerPort: 8080
        protocol: TCP

    volumeMounts:
        rootfsmountPath: /rootfs
        rootfsname: rootfs
        rootfsreadOnly: true
        varrunmountPath: /var/run
        varname: var-run
        varrunreadOnly: false
        sysmountPath: /sys
        sysname: sys
        sysreadOnly: true
        dockermountPath: /var/lib/docker
        dockername: docker
        dockerreadOnly: true
        diskmountPath: /dev/disk
        diskname: disk
        diskreadOnly: true

    terminationGracePeriodSeconds: 30

    volumes:
        rootfsname: rootfs
        rootfspath: /
        runname: var-run
        runpath: /var/run
        sysname: sys
        syspath: /sys
        dockername: docker
        dockerpath: /var/lib/docker
        diskname: disk
        diskpath: /dev/disk


# KSM
kube-state-metrics:
    #enabled: true

    name: kube-state-metrics
    k8sapp: kube-state-metrics
    opscruisePerimeter: opscruise
    opscruiseGroup: exporters
    opscruiseProduct: KSM
    opscruiseStream: opscruise

    replicaCount: 1

    image:
        repository: quay.io/coreos/kube-state-metrics
        tag: v1.6.0

    ports:
        name1: http-metrics
        containerPort1: 8080
        name2: telemetry
        containerPort2: 8081

    readinessProbe:
        path: /healthz
        port: 8080
        initialDelaySeconds: 5
        timeoutSeconds: 5

    serviceAccount:
        name: kube-state-metrics

    ClusterRoleBinding:
        name: kube-state-metrics

# prometheus
prometheus:
    #enabled: true

    replicaCount: 1

    image:
        repository: prom/prometheus
        tag: v2.17.1
        pullPolicy: Always

    args:
        configFile: '--config.file=/etc/prometheus/prometheus.yml'

    ports:
        containerPort: 9090

    resources:
        limits:
            memory: 600Mi
        requests:
            cpu: 200m
            memory: 300Mi

    volumeMounts:
        mountPath: /etc/prometheus

    hostNetwork: true
    hostPID: true

    volumes:
        configMap: prometheus-configmap

    restartPolicy: Always

# Docker creds
dockerCredentials:
    registry: https://index.docker.io/v1/
    username: username
    password: password


# Tags
tags:
    opscruise: true
    collectors: true

# Aws creds
awsCredentials:
    aws_access_key_id: aws_access_key_id
    aws_secret_access_key: aws_secret_access_key
    region: us-east-1

# gateway creds
gatewayCreds:
    oc-environment:
        DOCKER_SERVER: https://index.docker.io/v1/
        DOCKER_USERNAME: username
        DOCKER_PASSWORD: password
        DOCKER_EMAIL: email
        OPSCRUISE_ENDPOINT: 192.168.43.188:9092
        KEYCLOAK_ENABLED: false
        KEYCLOAK_URL: https://auth.opscruise.io:8443
        KEYCLOAK_CLIENT_ID: kafka-client
        KEYCLOAK_CLIENT_SECRET: <KEYCLOAK_CLIENT_SECRET>
        KEYCLOAK_REALM: <KEYCLOAK_REALM>
        OPSCRUISE_ACCOUNT_ID: anything


# cert creds
certCreds:
    # file: server.cer.pem
    value: "value"